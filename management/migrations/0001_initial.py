# Generated by Django 5.1.6 on 2025-05-19 13:07

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('water_source', models.CharField(max_length=255)),
                ('daily_water_requirement', models.PositiveIntegerField()),
                ('daily_flow_rate', models.PositiveIntegerField()),
                ('water_usage', models.CharField(choices=[('domestic', 'Domestic (Household Use)'), ('drinking', 'Drinking Water'), ('cooking', 'Cooking'), ('bathing', 'Bathing/Showering'), ('laundry', 'Laundry'), ('sanitation', 'Toilets/Sanitation'), ('industrial', 'Industrial'), ('commercial', 'Commercial'), ('manufacturing', 'Manufacturing'), ('cooling', 'Cooling Systems'), ('processing', 'Processing'), ('agricultural', 'Agricultural'), ('irrigation', 'Irrigation'), ('aquaculture', 'Aquaculture/Fish Farming'), ('livestock', 'Livestock'), ('medical', 'Medical'), ('laboratory', 'Laboratory'), ('bottling', 'Bottling / Packaged Water'), ('municipal', 'Municipal Supply'), ('fire_protection', 'Fire Protection'), ('street_cleaning', 'Street Cleaning'), ('construction', 'Construction'), ('recreational', 'Recreational (Pools, etc.)'), ('environmental', 'Environmental / Ecosystem Use'), ('other', 'Other')], max_length=50)),
                ('site_location', models.JSONField(default=dict, max_length=255)),
                ('extras', models.JSONField(default=dict)),
                ('budjet', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ManagementAttachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.UUIDField()),
                ('file', models.FileField(upload_to='management_attachments/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'dcm'])])),
                ('document_type', models.CharField(choices=[('WAR', 'Water Analysis Report'), ('TP', 'Treatment Plan'), ('CC', 'Compliance Certificate'), ('LTR', 'Lab Test Result'), ('ES', 'Equipment Specification'), ('ML', 'Maintenance Log'), ('OR', 'Operational Report'), ('SDS', 'Safety Data Sheet'), ('PER', 'Permit/License'), ('CON', 'Contract Agreement')], max_length=50)),
                ('caption', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_sensitive', models.BooleanField(default=False)),
                ('access_audit', models.JSONField(default=dict)),
            ],
            options={
                'verbose_name': 'Management Document',
                'verbose_name_plural': 'Management Documents',
            },
        ),
        migrations.CreateModel(
            name='WaterGuideline',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('body', models.CharField(max_length=255)),
                ('usage', models.CharField(choices=[('domestic', 'Domestic (Household Use)'), ('drinking', 'Drinking Water'), ('cooking', 'Cooking'), ('bathing', 'Bathing/Showering'), ('laundry', 'Laundry'), ('sanitation', 'Toilets/Sanitation'), ('industrial', 'Industrial'), ('commercial', 'Commercial'), ('manufacturing', 'Manufacturing'), ('cooling', 'Cooling Systems'), ('processing', 'Processing'), ('agricultural', 'Agricultural'), ('irrigation', 'Irrigation'), ('aquaculture', 'Aquaculture/Fish Farming'), ('livestock', 'Livestock'), ('medical', 'Medical'), ('laboratory', 'Laboratory'), ('bottling', 'Bottling / Packaged Water'), ('municipal', 'Municipal Supply'), ('fire_protection', 'Fire Protection'), ('street_cleaning', 'Street Cleaning'), ('construction', 'Construction'), ('recreational', 'Recreational (Pools, etc.)'), ('environmental', 'Environmental / Ecosystem Use'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the guideline.', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('inactive', 'Inactive')], default='pending', max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WaterGuidelineParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('unit', models.CharField(max_length=50)),
                ('min_value', models.FloatField(blank=True, null=True)),
                ('max_value', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WaterLabParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Parameter name, e.g., pH, Iron, TDS.', max_length=100)),
                ('unit', models.CharField(help_text='Measurement unit, e.g., mg/L, NTU.', max_length=50)),
                ('value', models.FloatField(help_text='Measured value of the parameter.')),
            ],
            options={
                'verbose_name': 'Water Lab Parameter',
                'verbose_name_plural': 'Water Lab Parameters',
            },
        ),
        migrations.CreateModel(
            name='WaterLabReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('report_source', models.CharField(choices=[('Internal', 'Internal'), ('External', 'External')], help_text='Origin of the water lab report (internal/external).', max_length=50)),
                ('report_date', models.DateField(blank=True, null=True)),
                ('test_type', models.CharField(choices=[('General', 'General'), ('Bacteriological', 'Bacteriological'), ('PHY', 'Physical Characteristics'), ('CHE', 'Chemical Composition'), ('MIC', 'Microbiological'), ('RAD', 'Radiological'), ('TOX', 'Toxicological'), ('COM', 'Comprehensive Analysis')], help_text='The type of water test conducted (e.g., Chemical, Bacteriological).', max_length=50)),
            ],
            options={
                'verbose_name': 'Water Lab Report',
                'verbose_name_plural': 'Water Lab Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WaterReportAttachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file', models.FileField(help_text='Attachment file (PDF, image, document, spreadsheet, etc).', upload_to='water_report_attachments/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'dcm', 'doc', 'docx', 'xls', 'xlsx', 'csv', 'txt'])])),
                ('document_type', models.CharField(choices=[('WAR', 'Water Analysis Report'), ('TP', 'Treatment Plan'), ('CC', 'Compliance Certificate'), ('LTR', 'Lab Test Result'), ('ES', 'Equipment Specification'), ('ML', 'Maintenance Log'), ('OR', 'Operational Report'), ('SDS', 'Safety Data Sheet'), ('PER', 'Permit/License'), ('CON', 'Contract Agreement')], help_text='Type of the document attached.', max_length=50)),
                ('caption', models.CharField(blank=True, help_text='Optional caption for the file.', max_length=255, null=True)),
                ('description', models.TextField(blank=True, help_text='Optional description for the file.', null=True)),
                ('is_sensitive', models.BooleanField(default=False, help_text='Indicates if the attachment contains sensitive content.')),
                ('access_audit', models.JSONField(default=dict, help_text='JSON structure tracking access audit information (who accessed and when).')),
            ],
            options={
                'verbose_name': 'Water Report Attachment',
                'verbose_name_plural': 'Water Report Attachments',
                'ordering': ['-created_at'],
            },
        ),
    ]
